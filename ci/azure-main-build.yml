# Copyright 2020-2023 the .NET Foundation
# Licensed under the MIT License

# Main build stage.

parameters:
- name: 'zolaVersion'
  default: '0.15.3'
  type: string

jobs:
- job: build_linux
  pool:
    vmImage: ubuntu-latest
  steps:
  - template: azure-job-setup.yml
    parameters:
      setupBuild: true

  - bash: yarn run build
    displayName: Yarn build

  # Create and stage our panoply of artifacts. (No reason not to do this ASAP --
  # these can help debug build problems.)

  - bash: |
      set -xeuo pipefail
      mkdir -p $ARTIFACT_STAGING/yarn
      yarn workspaces foreach pack -o $ARTIFACT_STAGING/yarn/%s-%v.tgz
    displayName: Create and stage Yarn package artifacts

  - task: PublishPipelineArtifact@0
    displayName: Publish Yarn package artifacts
    inputs:
      artifactName: yarn
      targetPath: $(Build.ArtifactStagingDirectory)/yarn

  - bash: |
      set -xeuo pipefail
      mkdir -p $ARTIFACT_STAGING/engine-hosted
      cp engine/src/index.js $ARTIFACT_STAGING/engine-hosted/wwtsdk.js
      cp engine/src/index.min.js $ARTIFACT_STAGING/engine-hosted/wwtsdk.min.js
      cp engine/src/index.d.ts $ARTIFACT_STAGING/engine-hosted/wwtsdk.d.ts
    displayName: Stage JavaScript hosted artifacts

  - task: PublishPipelineArtifact@0
    displayName: Publish JavaScript hosted artifacts
    inputs:
      artifactName: engine-hosted
      targetPath: $(Build.ArtifactStagingDirectory)/engine-hosted

  - task: CopyFiles@2
    displayName: Stage embed app artifacts
    inputs:
      sourceFolder: embed/dist
      targetFolder: $(Build.ArtifactStagingDirectory)/embed

  - task: PublishPipelineArtifact@0
    displayName: Publish embed app artifacts
    inputs:
      artifactName: embed
      targetPath: $(Build.ArtifactStagingDirectory)/embed

  - task: CopyFiles@2
    displayName: Stage embed-creator app artifacts
    inputs:
      sourceFolder: embed-creator/dist
      targetFolder: $(Build.ArtifactStagingDirectory)/embed-creator

  - task: PublishPipelineArtifact@0
    displayName: Publish embed-creator app artifacts
    inputs:
      artifactName: embed-creator
      targetPath: $(Build.ArtifactStagingDirectory)/embed-creator

  - task: CopyFiles@2
    displayName: Stage research-app artifacts
    inputs:
      sourceFolder: research-app/dist
      targetFolder: $(Build.ArtifactStagingDirectory)/research-app

  - task: PublishPipelineArtifact@0
    displayName: Publish research-app artifacts
    inputs:
      artifactName: research-app
      targetPath: $(Build.ArtifactStagingDirectory)/research-app

  # OK, now actually test

  - bash: yarn run test
    displayName: Yarn test

  - task: PublishTestResults@2
    displayName: Publish test results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'engine/tests/results.xml'


- job: build_macos
  pool:
    vmImage: macos-11
  steps:
  - template: azure-job-setup.yml
    parameters:
      setupBuild: true

  - bash: yarn run build
    displayName: Yarn build

  - bash: yarn run test
    displayName: Yarn test

  - task: PublishTestResults@2
    displayName: Publish test results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'engine/tests/results.xml'


- job: browserstack
  pool:
    vmImage: ubuntu-latest
  steps:
  - template: azure-job-setup.yml
    parameters:
      setupBuild: true

  - bash: yarn run build
    displayName: Yarn build

  - bash: |
      set -xeuo pipefail
      cd tests
      yarn run build
    displayName: Build test code

  # We can't use the BrowserStackConfig@0 task because it relies on an Azure
  # Pipelines "service connection" for BrowserStack, and as far as I can tell it
  # is not possible to make those available to pull requests from repo forks.
  # Which is something we want. So instead this pipeline has been configured in
  # the AzP UI with *non-secured* environment variables configuring the
  # BrowserStack-local client. A malicious pull request could easily expose
  # those variables, so we have to be careful. To mitigate things, the
  # vulnerable username and access key correspond to a BrowserStack "service
  # account" named `ci-testing` that's owned by the impersonal WWT BrowserStack
  # account.

  - bash: |
      set -xeuo pipefail
      yarn run serve-research &
      sleep 10 # give the local service time to start up
      cd tests
      yarn bs-local -e default,firefox,edge,safari -o reports
      pkill -f vue-cli-service  # stop the servers
    displayName: BrowserStack test local research app

  - task: PublishTestResults@2
    displayName: Publish test results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'tests/reports/*.xml'


- job: lint
  pool:
    vmImage: ubuntu-latest
  steps:
  - template: azure-job-setup.yml
    parameters:
      setupBuild: true

  - bash: yarn run build
    displayName: Yarn build

  - bash: yarn run lint
    displayName: Yarn lint


- job: docs_engine
  pool:
    vmImage: ubuntu-latest
  steps:
  - template: azure-job-setup.yml
    parameters:
      setupBuild: true

  - bash: yarn run build
    displayName: Yarn build

  - script: yarn run doc
    displayName: Yarn doc

  - bash: |
      set -xeuo pipefail
      fn="zola-v${{ parameters.zolaVersion }}-x86_64-unknown-linux-gnu.tar.gz"
      u="https://github.com/getzola/zola/releases/download/v${{ parameters.zolaVersion }}/$fn"
      wget "$u"
      tar xzf "$fn"
      rm -rf "$fn"
    displayName: Install Zola

  - bash: |
      set -xeuo pipefail
      cd docs/engine
      ../../zola check
    displayName: Check Zola engine docs site

  - bash: |
      set -xeuo pipefail
      cd docs/engine
      ../../zola build -o $ARTIFACT_STAGING/docs-engine
    displayName: Zola engine docs build

  - task: PublishPipelineArtifact@0
    displayName: Publish engine docs artifacts
    inputs:
      artifactName: docs-engine
      targetPath: $(Build.ArtifactStagingDirectory)/docs-engine


- job: docs_research
  pool:
    vmImage: ubuntu-latest
  steps:
  - template: azure-job-setup.yml
    parameters:
      setupBuild: true

  - bash: yarn run build
    displayName: Yarn build

  - script: yarn run doc
    displayName: Yarn doc

  - bash: |
      set -xeuo pipefail
      fn="zola-v${{ parameters.zolaVersion }}-x86_64-unknown-linux-gnu.tar.gz"
      u="https://github.com/getzola/zola/releases/download/v${{ parameters.zolaVersion }}/$fn"
      wget "$u"
      tar xzf "$fn"
      rm -rf "$fn"
    displayName: Install Zola

  - bash: |
      set -xeuo pipefail
      cd docs/research-app
      ../../zola check
    displayName: Check Zola research app docs site

  - bash: |
      set -xeuo pipefail
      cd docs/research-app
      ../../zola build -o $ARTIFACT_STAGING/docs-research-app
    displayName: Zola research app docs build

  - task: PublishPipelineArtifact@0
    displayName: Publish research app docs artifacts
    inputs:
      artifactName: docs-research-app
      targetPath: $(Build.ArtifactStagingDirectory)/docs-research-app
