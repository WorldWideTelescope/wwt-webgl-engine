# Copyright 2020-2022 the .NET Foundation
# Licensed under the MIT License

parameters:
- name: isMainDev
  type: boolean
  default: false
- name: isRelease
  type: boolean
  default: false

jobs:

# Deployment jobs that might happen on updates to either `master` *or* `rc`.
# On updates to master, we deploy everything under the "latest" name. On
# updates to `rc`, we deploy some subset of the projects that can only be
# determined at runtime.

- job: deploy_engine_hosted
  pool:
    vmImage: windows-latest
  variables:
  - group: Deployment Credentials
  steps:
  - template: azure-job-setup.yml

  - bash: |
      set -euo pipefail
      if [[ ${isMainDev} == True ]] ; then
        tag=latest
      elif cranko show if-released --exit-code @wwtelescope/engine ; then
        # Engine tag is major version only:
        tag="$(cranko show version @wwtelescope/engine |cut -d. -f1)"
      else
        tag=skip
      fi
      echo "engine deployment tag: $isMainDev, $isRelease => $tag"
      echo "##vso[task.setvariable variable=ENGINE_DEPLOYMENT_TAG;]$tag"
    displayName: Determine deployment tag
    env:
      isMainDev: ${{ parameters.isMainDev }}
      isRelease: ${{ parameters.isRelease }}

  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['ENGINE_DEPLOYMENT_TAG'], 'skip'))
    displayName: Deploy hosted engine artifacts
    inputs:
      SourcePath: '$(Pipeline.Workspace)/engine-hosted'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: engine/$(ENGINE_DEPLOYMENT_TAG)

  - task: AzurePowerShell@4
    condition: and(succeeded(), ne(variables['ENGINE_DEPLOYMENT_TAG'], 'skip'))
    displayName: CDN purge - hosted engine artifacts
    inputs:
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      azurePowerShellVersion: 'LatestVersion'
      scriptType: 'inlineScript'
      inline: |
        Clear-AzCdnEndpointContent `
          -ProfileName wwt-cdn-01 `
          -ResourceGroupName wwt-web01 `
          -EndpointName wwtweb-prod `
          -ContentPath @('/engine/$(ENGINE_DEPLOYMENT_TAG)/*')

- job: deploy_embed
  pool:
    vmImage: windows-latest
  variables:
  - group: Deployment Credentials
  steps:
  - template: azure-job-setup.yml

  - bash: |
      set -euo pipefail
      if [[ ${isMainDev} == True ]] ; then
        tag=latest
      elif cranko show if-released --exit-code @wwtelescope/embed ; then
        # Embed tag is major version only:
        tag="$(cranko show version @wwtelescope/embed |cut -d. -f1)"
      else
        tag=skip
      fi
      echo "embed deployment tag: $isMainDev, $isRelease => $tag"
      echo "##vso[task.setvariable variable=EMBED_DEPLOYMENT_TAG;]$tag"
    displayName: Determine deployment tag
    env:
      isMainDev: ${{ parameters.isMainDev }}
      isRelease: ${{ parameters.isRelease }}

  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['EMBED_DEPLOYMENT_TAG'], 'skip'))
    displayName: Deploy embed web application
    inputs:
      SourcePath: '$(Pipeline.Workspace)/embed'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: embed/$(EMBED_DEPLOYMENT_TAG)/wwt

  - task: AzurePowerShell@4
    condition: and(succeeded(), ne(variables['EMBED_DEPLOYMENT_TAG'], 'skip'))
    displayName: CDN purge - embed web app
    inputs:
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      azurePowerShellVersion: 'LatestVersion'
      scriptType: 'inlineScript'
      inline: |
        Clear-AzCdnEndpointContent `
          -ProfileName wwt-cdn-01 `
          -ResourceGroupName wwt-web01 `
          -EndpointName wwtweb-prod `
          -ContentPath @('/embed/$(EMBED_DEPLOYMENT_TAG)/wwt/*')

# The embed creator is not versioned - both master and RC deploy to prod. YOLO.

- job: deploy_embed_creator
  pool:
    vmImage: windows-latest
  variables:
  - group: Deployment Credentials
  steps:
  - template: azure-job-setup.yml

  - bash: |
      set -euo pipefail
      if [[ ${isMainDev} == True ]] ; then
        tag=yes
      elif cranko show if-released --exit-code @wwtelescope/embed-creator ; then
        tag=yes
      else
        tag=skip
      fi
      echo "embed-creator deployment tag: $isMainDev, $isRelease => $tag"
      echo "##vso[task.setvariable variable=CREATOR_DEPLOYMENT_TAG;]$tag"
    displayName: Determine deployment tag
    env:
      isMainDev: ${{ parameters.isMainDev }}
      isRelease: ${{ parameters.isRelease }}

  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['CREATOR_DEPLOYMENT_TAG'], 'skip'))
    displayName: Deploy embed-creator web application
    inputs:
      SourcePath: '$(Pipeline.Workspace)/embed-creator'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: _embedui

  # People say the docs are misleading about how to purge a CDN endpoint from
  # the root; try the all-of-the-above approach.
  # https://stackoverflow.com/questions/50591959/how-to-full-purge-the-azure-cdn-through-powershell
  - task: AzurePowerShell@4
    condition: and(succeeded(), ne(variables['CREATOR_DEPLOYMENT_TAG'], 'skip'))
    displayName: CDN purge - embed-creator web app
    inputs:
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      azurePowerShellVersion: 'LatestVersion'
      scriptType: 'inlineScript'
      inline: |
        $names = @('/', '/*', '/css/*', '/js/*')
        Clear-AzCdnEndpointContent `
          -ProfileName wwt-cdn-01 `
          -ResourceGroupName wwt-web01 `
          -EndpointName wwtwebembed-prod `
          -ContentPath $names

- job: deploy_research_app
  pool:
    vmImage: windows-latest
  variables:
  - group: Deployment Credentials
  steps:
  - template: azure-job-setup.yml

  # Set the "deployment tag" for the research app. The variable
  # $RESEARCH_APP_DEPLOYMENT_TAG is set to either "latest", if we're doing a
  # 'main dev' release (= merge to master), "skip", if we shouldn't release it;
  # or the major version number, if we're making a real official release of the
  # package.
  - bash: |
      set -euo pipefail
      if [[ ${isMainDev} == True ]] ; then
        tag=latest
      elif cranko show if-released --exit-code @wwtelescope/research-app ; then
        tag="$(cranko show version @wwtelescope/research-app |cut -d. -f1)"
      else
        tag=skip
      fi
      echo "research app deployment tag: $isMainDev, $isRelease => $tag"
      echo "##vso[task.setvariable variable=RESEARCH_APP_DEPLOYMENT_TAG;]$tag"
    displayName: Determine deployment tag
    env:
      isMainDev: ${{ parameters.isMainDev }}
      isRelease: ${{ parameters.isRelease }}

  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['RESEARCH_APP_DEPLOYMENT_TAG'], 'skip'))
    displayName: Deploy research web application
    inputs:
      SourcePath: '$(Pipeline.Workspace)/research-app'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: research/$(RESEARCH_APP_DEPLOYMENT_TAG)

  - task: AzurePowerShell@4
    condition: and(succeeded(), ne(variables['RESEARCH_APP_DEPLOYMENT_TAG'], 'skip'))
    displayName: CDN purge - research web app
    inputs:
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      azurePowerShellVersion: 'LatestVersion'
      scriptType: 'inlineScript'
      inline: |
        Clear-AzCdnEndpointContent `
          -ProfileName wwt-cdn-01 `
          -ResourceGroupName wwt-web01 `
          -EndpointName wwtweb-prod `
          -ContentPath @('/research/$(RESEARCH_APP_DEPLOYMENT_TAG)/*')

# Since the engine docs combine outputs from nearly every submodule, we deploy new
# versions on every update. Because the docs combine many different submodules,
# that raises the question of what version number to assign. As a heuristic, we
# track @wwtelescope/engine.

- job: deploy_engine_docs
  pool:
    vmImage: windows-latest
  variables:
  - group: Deployment Credentials
  steps:
  - template: azure-job-setup.yml

  - bash: |
      set -euo pipefail
      if [[ ${isMainDev} == True ]] ; then
        tag=latest
      else
        # Docs release tag is `major.minor`.
        tag="$(cranko show version @wwtelescope/engine |cut -d. -f1,2)"
      fi
      echo "engine docs deployment tag: $isMainDev, $isRelease => $tag"
      echo "##vso[task.setvariable variable=ENGINE_DOCS_DEPLOYMENT_TAG;]$tag"
    displayName: Determine deployment tag
    env:
      isMainDev: ${{ parameters.isMainDev }}
      isRelease: ${{ parameters.isRelease }}

  - task: AzureFileCopy@3
    displayName: Deploy engine documentation
    inputs:
      SourcePath: '$(Pipeline.Workspace)/docs-engine'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: '_docs/webgl-reference/$(ENGINE_DOCS_DEPLOYMENT_TAG)'

  - task: AzurePowerShell@4
    displayName: CDN purge - engine docs
    inputs:
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      azurePowerShellVersion: 'LatestVersion'
      scriptType: 'inlineScript'
      inline: |
        Clear-AzCdnEndpointContent `
          -ProfileName wwt-cdn-01 `
          -ResourceGroupName wwt-web01 `
          -EndpointName wwtwebdocs-prod `
          -ContentPath @('/webgl-reference/$(ENGINE_DOCS_DEPLOYMENT_TAG)/*')

- job: deploy_research_app_docs
  pool:
    vmImage: windows-latest
  variables:
  - group: Deployment Credentials
  steps:
  - template: azure-job-setup.yml

  - bash: |
      set -euo pipefail
      if [[ ${isMainDev} == True ]] ; then
        tag=latest
      else
        # Docs release tag is `major.minor`.
        tag="$(cranko show version @wwtelescope/research-app |cut -d. -f1,2)"
      fi
      echo "research app docs deployment tag: $isMainDev, $isRelease => $tag"
      echo "##vso[task.setvariable variable=RESEARCH_APP_DOCS_DEPLOYMENT_TAG;]$tag"
    displayName: Determine deployment tag
    env:
      isMainDev: ${{ parameters.isMainDev }}
      isRelease: ${{ parameters.isRelease }}

  - task: AzureFileCopy@3
    displayName: Deploy research app documentation
    inputs:
      SourcePath: '$(Pipeline.Workspace)/docs-research-app'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: '_docs/research-app/$(RESEARCH_APP_DOCS_DEPLOYMENT_TAG)'

  - task: AzurePowerShell@4
    displayName: CDN purge - research app docs
    inputs:
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      azurePowerShellVersion: 'LatestVersion'
      scriptType: 'inlineScript'
      inline: |
        Clear-AzCdnEndpointContent `
          -ProfileName wwt-cdn-01 `
          -ResourceGroupName wwt-web01 `
          -EndpointName wwtwebdocs-prod `
          -ContentPath @('/research-app/$(RESEARCH_APP_DOCS_DEPLOYMENT_TAG)/*')

# Deployment jobs that should only happen on updates to `rc`, i.e.
# primary releases.

- ${{ if parameters.isRelease }}:
  - job: branch_and_tag
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupGit: true
    - bash: |
        set -xeou pipefail
        cranko release-workflow tag
        git push --tags origin release:release
      displayName: Tag and push
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: github_releases
    dependsOn: branch_and_tag # otherwise, GitHub creates the tags itself!
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupGit: true
    - bash: |
        set -xeou pipefail
        cranko github create-releases
      displayName: Create GitHub releases
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: yarn_publish
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupBuild: true
        setupNpm: true

    - bash: yarn run build
      displayName: Yarn build

    - bash: |
        set -xeou pipefail
        cranko npm foreach-released yarn npm publish
      displayName: Publish to NPM

    - bash: shred ~/.yarnrc.yml
      displayName: Clean up credentials
